=================================================================================================
Abp Vnext框架结构
=================================================================================================
---------------------------------------------------------------------------
.DbMigrator 应用迁移模块：
---------------------------------------------------------------------------
右键单击.DbMigrator项目并选择 设置为启动项目，运行 .DbMigrator 应用程序. 它会应用所有迁移,完成流程后你会看到以下结果,数据库已经准备好了!
---------------------------------------------------------------------------
.EntityFrameworkCore.DbMigrations 另一个迁移模块
---------------------------------------------------------------------------
使用EF Core Update-Database命令
Ef Core具有Update-Database命令, 可根据需要创建数据库并应用挂起的迁移. 右键单击.Web项目并选择设置为启动项目:
右键单击.Web项目并选择设置为启动项目:
打开包管理器控制台(Package Manager Console), 选择.EntityFrameworkCore.DbMigrations项目作为默认项目并运行Update-Database命令。
.Web 站点模块：
---------------------------------------------------------------------------
网站启动入口

.Domain 模块：
---------------------------------------------------------------------------
包含你的实体, 领域服务和其他核心域对象

.Domain.Shared 模块：
---------------------------------------------------------------------------
包含可与客户共享的常量,枚举或其他域相关对象.

.EntityFrameworkCore 模块：
---------------------------------------------------------------------------
数据应用层，主要DbContext类就在这个方法模块里，以及实体的配置xxDbContextModelCreatingExtensions.cs类也在这个模块中

.Application.Contracts 模块：
---------------------------------------------------------------------------
主要包含你的DTO和应用程序服务接口

.Application 模块：
---------------------------------------------------------------------------
包含应用程序服务的实现.

=================================================================================================
创建实体，建表：
https://docs.abp.io/zh-Hans/abp/latest/Tutorials/Part-1?UI=MVC
按流程创建实体，添加到DbContext后，需要注意一定要在
=================================================================================================
在 Acme.BookStore.EntityFrameworkCore 项目中打开 BookStoreDbContextModelCreatingExtensions.cs 文件,
并将以下代码添加到 ConfigureBookStore 方法的末尾以配置Book实体:（BooK是你要创建映射的实体的名称）
builder.Entity<Book>(b =>
{
    b.ToTable(BookStoreConsts.DbTablePrefix + "Book", BookStoreConsts.DbSchema);
    b.ConfigureByConvention(); //auto configure for the base class props
    b.Property(x => x.Name).IsRequired().HasMaxLength(128);
});
=================================================================================================
如果不加这段代码，运行迁移命令则无法正确添加表到数据库


Abp vNext 测试模块代编写代码实例
=================================================================================================
使用ABP-CLI创建项目：
abp new Acme.TestBook --template app --database-provider ef --ui mvc --mobile none
其中Acme.BookStore是项目名称，用到的时候自行替换。
数据库连接字符串：
.Web 项目下 appsettings.json 文件中的 链接字符串
---------------------------------------------------------------------------
"ConnectionStrings": {
  "Default": "Server=localhost;Database=BookStore;Trusted_Connection=True"
}
---------------------------------------------------------------------------
.DbMigrator项目有自己的appsettings.json. 因此,如果你更改了上面的连接字符串,则还应更改此字符串.
使用EF Core Update-Database命令
选择.EntityFrameworkCore.DbMigrations项目作为默认项目并运行Update-Database命令:

=================================================================================================
在.Application.Test命名空间中加入测试类，命名方式为XXXAppService_Test
以BookAppService_Test例子说明

public class BookAppService_Test:BookStoreApplicationTestBase
    {
        //注入应用服务接口 IBookAppService
        private readonly IBookAppService bookAppService;
        public BookAppService_Test()
        {
            this.bookAppService = GetRequiredService<IBookAppService>();
        }
        //下面是你要测试的方法，其中CreateUpdateBookDto为自定义的DTO
        [Fact]
        //测试getlist方法
        public async Task Should_Get_List_Of_Books()
        {
            var result = await this.bookAppService.GetListAsync(new Volo.Abp.Application.Dtos.PagedAndSortedResultRequestDto());
            result.TotalCount.ShouldBeGreaterThan(0);
            result.Items.ShouldContain(x => x.Name == "test book 1");
        }
        [Fact]
        //测试Create方法
        public async Task Should_Create_Book()
        {
            var result = await this.bookAppService.CreateAsync(
                new CreateUpdateBookDto { Name = "New test book 42", 
                    Price = 20, 
                    PublishDate = DateTime.Now, 
                    Type = BookType.ScienceFiction }
                );
            result.Id.ShouldNotBe(Guid.Empty);
            result.Name.ShouldBe("New test book 42");
        }
        [Fact]
        //测试Create异常方法
        public async Task Should_Create_Book_WithOut_Name()
        {
            var exception = await Assert.ThrowsAsync<Volo.Abp.Validation.AbpValidationException>(
                async () =>
                {
                    await this.bookAppService.CreateAsync(
                        new CreateUpdateBookDto
                        {
                            Name = "",
                            Price = 10,
                            PublishDate = DateTime.Now,
                            Type = BookType.ScienceFiction
                        }
                        );
                }
                );
            exception.ValidationErrors.ShouldContain(err => err.MemberNames.Any(mem => mem == "Name"));
        }
    }


=================================================================================================
一些特性
=================================================================================================
例如模型 Movie
    public class Movie
    {
        public int ID { get; set; }
        public string Title { get; set; }

        [DataType(DataType.Date)]
        public DateTime ReleaseDate { get; set; }
        public string Genre { get; set; }
        public decimal Price { get; set; }
    }
    [DataType(DataType.Date)]：DataType 属性指定数据的类型（日期）。 通过此特性：
    用户无需在数据字段中输入时间信息。
    仅显示日期，而非时间信息。
=================================================================================================
Abp vnext CURD示例中的坑
后端代码如教程所写即可，Index.cshtml页面在教程中的写法有坑，缺少本地化的引用，修正后的代码如下
@page
@model Acme.BookStore.Web.Pages.Books.IndexModel
//多了下面这一行
@inject Microsoft.AspNetCore.Mvc.Localization.IHtmlLocalizer<Acme.BookStore.Localization.BookStoreResource> L
//多了上面这一行
@section scripts
{
    <abp-script src="/Pages/Books/index.js" />
}
<abp-card>
    <abp-card_header>
        <h2>@L["Book"]</h2>
    </abp-card_header>
    <abp-card-body>
        <abp-table striped-rows="true" id="BookTable">
            <thead>
                <tr>
                    <th>@L["Name"]</th>
                    <th>@L["Type"]</th>
                    <th>@L["PublishDate"]</th>
                    <th>@L["Price"]</th>
                    <th>@L["CreationTime"]</th>
                </tr>
            </thead>
        </abp-table>
    </abp-card-body>
</abp-card>
=================================================================================================
异常日志查看
=================================================================================================
在这个框架中，在SWAGGER中是没有异常栈堆推出的，是以日志的形式保存
日志的位置在项目的.web文件夹下的\Logs\logs.txt
实例目录：
F:\AbpVnext\JJCK.StaffPerformanceSystem\src\JJCK.StaffPerformanceSystem.Web\Logs\logs.txt
=================================================================================================
遇到的问题
=================================================================================================
1.abp vnext如何更改默认的启动页
=================================================================================================