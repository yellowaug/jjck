在MVC项目下添加API路由，也就是MVC和WEB API混写在一个项目下的方法
在项目目录下的Global.asax文件下，添加WebApiConfig文件的委托。具体细节如下
    public class MvcApplication : System.Web.HttpApplication
    {
        protected void Application_Start()
        {
            AreaRegistration.RegisterAllAreas();
            GlobalConfiguration.Configure(WebApiConfig.Register); ##这个就是WEB API的路由注册，添加后才能访问/api/action这个样式的路径
            FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);
            RouteConfig.RegisterRoutes(RouteTable.Routes);
            BundleConfig.RegisterBundles(BundleTable.Bundles);
        }
    }
如果没有WebApiConfig.cs这个文件可以复制一下内容
=================================================================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.Http;

namespace JJCKManager #自己注意修改命名空间
{
    public static class WebApiConfig
    {
        public static void Register(HttpConfiguration config)
        {
            config.MapHttpAttributeRoutes();

            config.Routes.MapHttpRoute(
                name: "DefaultApi",
                routeTemplate: "api/{controller}/{id}",
                defaults: new { id = RouteParameter.Optional }
            );
        }
    }
}
=================================================================

.net mvc CURD常用写法
=================================================================

=================================================================

.net mvc 登录验证常用写法
=================================================================
Web.config的设置、
要在system.web这个子项添加authentication
  <system.web>
    <authentication mode="Forms">
      <forms loginUrl="~/LoginSys/LoginIndex"></forms> ~/控制器名称/方法名称
    </authentication>
    <compilation debug="true" targetFramework="4.6.1" />
    <httpRuntime targetFramework="4.6.1" />
  </system.web>
数据访问层
    public interface IcheckUser
    {
        bool Isaccountuser(Account account);
    }
  public class GetLoginUser : IcheckUser
    {
        public bool Isaccountuser(Account account)
        {
            using(JJCKManagerContext jjckdb=new JJCKManagerContext())
            {
                var chkresult = from username in jjckdb.Accounts
                                where username.UserName == account.UserName
                                where username.PassWord==account.PassWord
                                select username;                
                if (chkresult.ToList().Count() == 1)
                {
                    return true;
                }
                else
                {
                    return false;
                }return false;
                }

                 
            }
        }
    }
    控制层
    [HttpPost]
    public ActionResult LoginIndex(Account loginacc)
    {
        IcheckUser checkacc = new GetLoginUser();
        //var userName=checkacc.accountuser(loginacc);
        if (!checkacc.Isaccountuser(loginacc))
        {
            ModelState.AddModelError("CredentialError", "Invalid Username or Password");
            return RedirectToAction("LoginIndex");
        }
        else
        {
            FormsAuthentication.SetAuthCookie(loginacc.UserName, false); //这个方法是固定写法，设置cookie
            return RedirectToAction("Index", "Home");
        }
            
    }

    登出的方法：
    public ActionResult Logout()
        {
            FormsAuthentication.SignOut();
            return View("LoginIndex");
        }
