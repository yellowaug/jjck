在MVC项目下添加API路由，也就是MVC和WEB API混写在一个项目下的方法
在项目目录下的Global.asax文件下，添加WebApiConfig文件的委托。具体细节如下
    public class MvcApplication : System.Web.HttpApplication
    {
        protected void Application_Start()
        {
            AreaRegistration.RegisterAllAreas();
            GlobalConfiguration.Configure(WebApiConfig.Register); ##这个就是WEB API的路由注册，添加后才能访问/api/action这个样式的路径
            FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);
            RouteConfig.RegisterRoutes(RouteTable.Routes);
            BundleConfig.RegisterBundles(BundleTable.Bundles);
        }
    }
如果没有WebApiConfig.cs这个文件可以复制一下内容
=================================================================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.Http;

namespace JJCKManager #自己注意修改命名空间
{
    public static class WebApiConfig
    {
        public static void Register(HttpConfiguration config)
        {
            config.MapHttpAttributeRoutes();

            config.Routes.MapHttpRoute(
                name: "DefaultApi",
                routeTemplate: "api/{controller}/{id}",
                defaults: new { id = RouteParameter.Optional }
            );
        }
    }
}
=================================================================

.net mvc CURD常用写法
=================================================================
Add方法：
=================================================================
public interface IAddVmAcc
{
    void AddVmAcc(VMHostAccount vmhostacc);
}
public class AddData：IAddVmAcc{
void IAddVmAcc.AddVmAcc(VMHostAccount vmhostacc) //这个接口是显示实现的，关注业务流程就好
{
    using(JJCKManagerContext jjckdb = new JJCKManagerContext())
    {
        jjckdb.HostAccounts.Add(vmhostacc);
        jjckdb.SaveChanges();
    }
}
}
[HttpPost]
[ValidateAntiForgeryToken]
public ActionResult AddVmAccount(VMHostAccount vMHost) //判断模型是否有效，有效就完成功能，无效就返回异常
{
    try
    {
        if (ModelState.IsValid)
        {
            IAddVmAcc addVmAcc = new AddData();
            addVmAcc.AddVmAcc(vMHost);
            return RedirectToAction("Index");
        }
    }
    catch (DataException exc)
    {
        ModelState.AddModelError("", exc);
        
    }
    return View();
}
=================================================================
查询方法：以接口的形式实现
=================================================================

    public interface IVmAccList
    {
        List<VMHostAccount> GetAllVmAcc();
    }
   public class GetAccountList : IVmAccList
    {
        public List<Account> GetAllAccount()
        {
            using (JJCKManagerContext jjckdb = new JJCKManagerContext())
            {
                return jjckdb.Accounts.ToList();
            }
        }
    }
    public ActionResult Index()
    {
        IVmAccList vmaccList = new GetAccountList();
        var acclist=vmaccList.GetAllVmAcc();
        return View(acclist);
    }
=================================================================
跟新数据updata方法：这个方法实现得比较乱，分为get,和post两个请求
=================================================================
     public interface IupAccount###根据主键查询的实现
    {
        Account UptableSysAcc(int? id);
    }
        public class UpToTableData : IupAccount
    {
        private JJCKManagerContext jjckdb = new JJCKManagerContext();

        Account IupAccount.UptableSysAcc(int? id)
        {
            var sysaccres = jjckdb.Accounts.Find(id);
            return sysaccres;
        }
    }
    ###根据主键查询的实现
        public ActionResult UpSysacc(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            IupAccount upsysacc = new UpToTableData();

            var sysaccres = upsysacc.UptableSysAcc(id);
            if ( sysaccres== null)
            {
                return HttpNotFound();
            }
            return View(sysaccres);

        }
        [HttpPost]
        [ActionName("UpSysacc")]
        [ValidateAntiForgeryToken]
        public ActionResult PutUsSysacc(int? id,Account account)
        {
            JJCKManagerContext jjckdb = new JJCKManagerContext();
            
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            IupAccount upsysacc = new UpToTableData();
            var sysaccres = upsysacc.UptableSysAcc(id);
            if (TryUpdateModel(sysaccres, "",
               new string[] { "UserName", "PassWord", "Createdate" }))
            {
                try
                {
                    jjckdb.Entry(account).State= System.Data.Entity.EntityState.Modified; //更新数据的方法在这里
                    jjckdb.SaveChanges();
                    return RedirectToAction("Index");
                }
                catch (DataException dex/* dex */)
                {
                    //Log the error (uncomment dex variable name and add a line here to write a log.
                    ModelState.AddModelError("", dex);
                }
            }
            return View(sysaccres);

        }
=================================================================

.net mvc 登录验证常用写法
=================================================================
Web.config的设置、
要在system.web这个子项添加authentication
  <system.web>
    <authentication mode="Forms">
      <forms loginUrl="~/LoginSys/LoginIndex"></forms> ~/控制器名称/方法名称
    </authentication>
    <compilation debug="true" targetFramework="4.6.1" />
    <httpRuntime targetFramework="4.6.1" />
  </system.web>
数据访问层
    public interface IcheckUser
    {
        bool Isaccountuser(Account account);
    }
  public class GetLoginUser : IcheckUser
    {
        public bool Isaccountuser(Account account)
        {
            using(JJCKManagerContext jjckdb=new JJCKManagerContext())
            {
                var chkresult = from username in jjckdb.Accounts
                                where username.UserName == account.UserName
                                where username.PassWord==account.PassWord
                                select username;                
                if (chkresult.ToList().Count() == 1)
                {
                    return true;
                }
                else
                {
                    return false;
                }return false;
                }

                 
            }
        }
    }
    控制层
    [HttpPost]
    public ActionResult LoginIndex(Account loginacc)
    {
        IcheckUser checkacc = new GetLoginUser();
        //var userName=checkacc.accountuser(loginacc);
        if (!checkacc.Isaccountuser(loginacc))
        {
            ModelState.AddModelError("CredentialError", "Invalid Username or Password");
            return RedirectToAction("LoginIndex");
        }
        else
        {
            FormsAuthentication.SetAuthCookie(loginacc.UserName, false); //这个方法是固定写法，设置cookie
            return RedirectToAction("Index", "Home");
        }
            
    }

    登出的方法：
    public ActionResult Logout()
        {
            FormsAuthentication.SignOut();
            return View("LoginIndex");
        }
===================================================================================================================
在razor下实现选择日期的前后端代码
后端代码，在数据库属性字段中用如下写法
        [Display(Name ="创建时间")]
        [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString = "{0:yyyy-MM-dd}", ApplyFormatInEditMode = true)]
        public DateTime CreateTime { get; set; }
前端代码用IDE生成的即可
===================================================================================================================
实现下拉标签的前后端写法实现
后端，在控制层代码中写法如下
 public class WebAccountController : Controller
    {
        JJCKManagerContext jjckdb = new JJCKManagerContext();
        // GET: WebAccount
        public ActionResult Index()
        {
            .......
        }
        public ActionResult AddWebAcc()
        {
            //ViewData用法详解，
            “CreateUser”是表示要创建的选择的属性字段，这个就是你是打算用哪个字段做成下拉列表的形式就是哪个字段
            jjckdb.Accounts 表示要哪个表提供数据，
            “Uid”,"UserName" 提供数据是哪个字段。
            ViewData["CreateUser"] = new SelectList(jjckdb.Accounts, "Uid", "UserName");
            return View();
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddWebAcc(WebManagerAccount webacc)
        {
            //ViewData["CreateUser"] = new SelectList(webaccdb.AccountUser, "Uid", "UserNmae", webacc.CreateUser);
            ViewData["CreateUser"] = new SelectList(jjckdb.Accounts, "Uid", "UserName", webacc.CreateUser);
            *****;
        }
    }
前端的写法 
"CreateUser"的意思和后端表示的意思是一般的
  <div class="form-group">
            @Html.LabelFor(model => model.CreateUser, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
               @* @Html.EditorFor(model => model.CreateUser, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.DropDownList("CreateUser",ViewData["CreateUser"]as SelectList,"请选择",new { @class = "form-control"  })
                @*@Html.ValidationMessageFor(model => model.CreateUser, "", new { @class = "text-danger" })*@
